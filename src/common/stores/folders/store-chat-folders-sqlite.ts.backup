import { create } from 'zustand';
import { sqlitePersist } from '../../../lib/db/zustand-sqlite-middleware';

import type { DConversationId } from '~/common/stores/chat/chat.conversation';
import { agiUuid } from '~/common/util/idUtils';

// Chat Folders Store with SQLite persistence

export interface DFolder {
  id: string;
  title: string;
  conversationIds: DConversationId[];
  color?: string; // Optional color property
}

interface FolderStore {
  folders: DFolder[];
  enableFolders: boolean; // user setting - default to off until we get enough feedback

  importFoldersAppend: (folders: DFolder[], enableFolders: boolean) => void;
  createFolder: (title: string, color?: string) => void;
  deleteFolder: (folderId: string) => void;
  moveFolder: (fromIndex: number, toIndex: number) => void;
  setFolderName: (folderId: string, title: string) => void;
  setFolderColor: (folderId: string, color: string) => void;
  addConversationToFolder: (folderId: string, conversationId: DConversationId) => void;
  removeConversationFromFolder: (folderId: string, conversationId: DConversationId) => void;
  toggleEnableFolders: () => void;
}

export const useFolderStore = create<any>()(
  sqlitePersist(
    (set: any) => ({
      // Initial state
      folders: [],
      enableFolders: false,

      // Actions
      importFoldersAppend: (folders: any, enableFolders: any) =>
        set((state: any) => ({
          folders: [...state.folders.filter((f: any) => !folders.find((f2: any) => f2.id === f.id)), ...folders],
          enableFolders: enableFolders || state.enableFolders,
        })),

      createFolder: (title: string, color?: string) => {
        const newFolder: DFolder = {
          id: agiUuid('chat-folders-item'),
          title,
          conversationIds: [],
          color,
        };

        set((state: any) => ({
          folders: [...state.folders, newFolder],
        }));
      },

      deleteFolder: (folderId: string): void =>
        set((state: any) => ({
          folders: state.folders.filter((folder: any) => folder.id !== folderId),
        })),

      moveFolder: (fromIndex: number, toIndex: number): void =>
        set((state: any) => {
          const newFolders = [...state.folders];
          const [movedFolder] = newFolders.splice(fromIndex, 1);
          newFolders.splice(toIndex, 0, movedFolder);
          return { folders: newFolders };
        }),

      setFolderName: (folderId: string, title: string): void =>
        set((state: any) => ({
          folders: state.folders.map((folder: any) => (folder.id === folderId ? { ...folder, title } : folder)),
        })),

      setFolderColor: (folderId: string, color: string): void =>
        set((state: any) => ({
          folders: state.folders.map((folder: any) => (folder.id === folderId ? { ...folder, color } : folder)),
        })),

      addConversationToFolder: (folderId: string, conversationId: string) =>
        set((state: any) => {
          const folders = state.folders.map((folder: any) => {
            // Check if this is the correct folder and if the conversationId is not already present
            if (folder.id === folderId && !folder.conversationIds.includes(conversationId)) {
              // Use the spread operator to create a new array with the conversationId added
              return { ...folder, conversationIds: [...folder.conversationIds, conversationId] };
            }
            return folder;
          });
          return { folders };
        }),

      removeConversationFromFolder: (folderId: any, conversationId: any) =>
        set((state: any) => ({
          folders: state.folders.map((folder: any) =>
            folder.id === folderId ? { ...folder, conversationIds: folder.conversationIds.filter((id: any) => id !== conversationId) } : folder,
          ),
        })),

      toggleEnableFolders: () =>
        set((state: any) => ({
          enableFolders: !state.enableFolders,
        })),
    }),
    {
      name: 'app-folders',
      version: 1,

      onRehydrateStorage: () => (state: any) => {
        if (state) {
          console.log('[SQLite] Chat Folders store rehydrated:', {
            foldersCount: state.folders.length,
            enableFolders: state.enableFolders,
            totalConversations: state.folders.reduce((sum: any, folder: any) => sum + folder.conversationIds.length, 0),
            folderTitles: state.folders.map((f: any) => f.title),
          });
        }
      },

      migrate: (state: any, fromVersion: number): any => {
        console.log(`[SQLite] Migrating Chat Folders store from version ${fromVersion} to version 1`);

        // Currently no migrations needed, but keeping the structure for future versions
        return state;
      },
    },
  ),
);

// Color palette for folders
export const FOLDERS_COLOR_PALETTE = [
  '#828282',
  '#f22a85',
  '#f13d41',
  '#cb6701',
  '#42940f',
  '#068fa6',
  '#407cf8',

  '#626262',
  '#b91e64',
  '#b72e30',
  '#9b4d01',
  '#2f7007',
  '#076c7e',
  '#1c5dc8',

  '#474747',
  '#8c0f49',
  '#891e20',
  '#713804',
  '#1f5200',
  '#004f5d',
  '#1d4294',
];

export function getRotatingFolderColor(): string {
  const randomIndex = Math.floor(Math.random() * (FOLDERS_COLOR_PALETTE.length / 3));
  return FOLDERS_COLOR_PALETTE[randomIndex];
}

// Testing utilities for SQLite Chat Folders Store
export async function testSqliteChatFoldersStore() {
  console.log('[SQLite Test] Testing Chat Folders store operations...');

  const currentState = useFolderStore.getState() as any;
  console.log('[SQLite Test] Current Chat Folders state:', {
    foldersCount: currentState.folders.length,
    enableFolders: currentState.enableFolders,
    totalConversations: currentState.folders.reduce((sum: any, folder: any) => sum + folder.conversationIds.length, 0),
    hasHydrated: currentState.hasHydrated ? currentState.hasHydrated() : true,
  });

  // Test some operations
  try {
    // Test folder creation
    const testFolderTitle = `Test Folder ${Date.now()}`;
    const testColor = getRotatingFolderColor();
    currentState.createFolder(testFolderTitle, testColor);
    console.log(`[SQLite Test] Created folder: ${testFolderTitle} with color: ${testColor}`);

    // Get the created folder
    const updatedState = useFolderStore.getState() as any;
    const testFolder = updatedState.folders.find((f: any) => f.title === testFolderTitle);

    if (testFolder) {
      // Test adding conversation to folder
      const testConversationId = `test-conv-${Date.now()}`;
      currentState.addConversationToFolder(testFolder.id, testConversationId);
      console.log(`[SQLite Test] Added conversation ${testConversationId} to folder ${testFolder.title}`);

      // Test folder name change
      const newTitle = `Updated ${testFolderTitle}`;
      currentState.setFolderName(testFolder.id, newTitle);
      console.log(`[SQLite Test] Updated folder name to: ${newTitle}`);

      // Test folder color change
      const newColor = '#ff0000';
      currentState.setFolderColor(testFolder.id, newColor);
      console.log(`[SQLite Test] Updated folder color to: ${newColor}`);

      // Test enable/disable folders
      const originalEnabled = currentState.enableFolders;
      currentState.toggleEnableFolders();
      console.log(`[SQLite Test] Toggled folders from ${originalEnabled} to ${!originalEnabled}`);
    }

    const finalState = useFolderStore.getState() as any;
    console.log('[SQLite Test] Final state after operations:', {
      foldersCount: finalState.folders.length,
      enableFolders: finalState.enableFolders,
      totalConversations: finalState.folders.reduce((sum: any, folder: any) => sum + folder.conversationIds.length, 0),
      lastFolder: finalState.folders[finalState.folders.length - 1],
    });

    return {
      success: true,
      operations: 5,
      finalState: {
        foldersCount: finalState.folders.length,
        enableFolders: finalState.enableFolders,
        totalConversations: finalState.folders.reduce((sum: any, folder: any) => sum + folder.conversationIds.length, 0),
        lastFolderTitle: finalState.folders[finalState.folders.length - 1]?.title,
        lastFolderColor: finalState.folders[finalState.folders.length - 1]?.color,
      },
    };
  } catch (error) {
    console.error('[SQLite Test] Error during Chat Folders store test:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}

// API-based testing utilities for external validation
export async function testChatFoldersStoreAPI() {
  console.log('[SQLite Test] Testing Chat Folders store via API...');

  try {
    // Test fetching Chat Folders store via API
    const response = await fetch('/api/stores/app-folders');

    if (response.ok) {
      const result = await response.json();
      console.log('[SQLite Test] Chat Folders store fetched via API:', result.data);
      return {
        success: true,
        data: result.data,
        source: 'api',
      };
    } else if (response.status === 404) {
      console.log('[SQLite Test] Chat Folders store not found via API, will be created on first use');
      return {
        success: true,
        data: null,
        source: 'api',
        note: 'Store not yet created',
      };
    } else {
      throw new Error(`API returned ${response.status}: ${response.statusText}`);
    }
  } catch (error) {
    console.error('[SQLite Test] Error testing Chat Folders store API:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}

// Migration utility for existing IndexedDB data
export async function migrateChatFoldersStoreFromIndexedDB() {
  console.log('[SQLite Migration] Starting Chat Folders migration from IndexedDB...');

  try {
    // This would typically read from IndexedDB and migrate to SQLite
    // For now, we'll just ensure the store is properly initialized
    const currentState = useFolderStore.getState() as any;

    if (currentState.hasHydrated && !currentState.hasHydrated()) {
      console.log('[SQLite Migration] Waiting for store to hydrate...');
      await new Promise((resolve) => setTimeout(resolve, 1000));
    }

    console.log('[SQLite Migration] Chat Folders store migration completed');
    return {
      success: true,
      migratedFolders: {
        foldersCount: currentState.folders.length,
        enableFolders: currentState.enableFolders,
        totalConversations: currentState.folders.reduce((sum: any, folder: any) => sum + folder.conversationIds.length, 0),
        folderTitles: currentState.folders.map((f: any) => f.title),
      },
    };
  } catch (error) {
    console.error('[SQLite Migration] Error during Chat Folders store migration:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}
